server {
  listen 80;
  listen [::]:80;
  server_name interflux.io www.interflux.io;
  return 301 https://interflux.io$request_uri;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name interflux.io;

  root /var/www/interflux.io/current;

  index index.html;

  access_log  /var/log/nginx/interflux.io.access.log;
  error_log   /var/log/nginx/interflux.io.error.log;

  # The SSL certificates generated by Certbot (Let's Encrypt) needed for HTTPS.
  ssl_certificate /etc/letsencrypt/live/interflux.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/interflux.io/privkey.pem;

  # Include best practice configurations
  include /etc/nginx/snippets/best_practices.conf;

  # Include recommended SSL encryption configurations
  include /etc/letsencrypt/options-ssl-nginx.conf;

  location /assets/ {
    # Add best practice security headers
    include /etc/nginx/snippets/security_headers.conf;

    add_header Served-By "Nginx";

    # Make sure all Ember assets (JS, CSS, images, fonts, ...) are cached for a long time.
    # The Ember assets are all fingerprinted and can easily bust caches.
    expires max;
    add_header Cache-Control "public";
  }

  location / {
    # Add best practice security headers
    include /etc/nginx/snippets/security_headers.conf;

    # Help tell wether the pages were served by Fastboot or Ember
    add_header Served-By "Fastboot";

    # Make sure all requests that are not assets are not cached.
    add_header Cache-Control "no-store";

    # HTTP/2 server push all files marked with the Link header
    http2_push_preload on;

    # Pass requests to Fastboot
    proxy_pass http://0.0.0.0:8001;
  }

  # TODO: Make Fastboot fallback to classic Ember.
  # It returns a 502 when the Fastboot service is not running.
  #
  # location @ember {
  #   # Add best practice security headers
  #   # include /etc/nginx/snippets/security_headers.conf;
  #
  #   # Help tell wether the pages were served by Fastboot or Ember
  #   add_header Served-By "Ember";
  #
  #   # As per example on Ember CLI website. Not sure why relevant...
  #   include /etc/nginx/mime.types;
  #
  #   # Necessary for making Ember routes work on browser page refresh. It works
  #   # by first fetching the file. If no file exists, it will serve the
  #   # index.html + URI. That's where the Ember router takes over.
  #   try_files $uri $uri/ /index.html?/$request_uri;
  # }
}
